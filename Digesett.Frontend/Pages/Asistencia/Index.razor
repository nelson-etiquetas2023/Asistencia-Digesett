@page "/asistencia/index"
@using Digesett.Frontend.Pages.Components
@using Digesett.Shared.Models
@using System.Text.Json
@using System.Diagnostics
@using System.Globalization
@using CsvHelper
@using ClosedXML.Excel
@inject SweetAlertService Swal
@inject IJSRuntime JS
@inject HttpClient httpClient
@implements IAsyncDisposable

<h1>Control de Asistencia</h1>

<div class="row">
    <div class="col-4 mb-3">
        <label class="fw-bold" >Fecha desde: </label>
        <InputDate Type="InputDateType.DateTimeLocal"
                   min="@DateTime.Today.ToString("dd-MM-yyyy")" @bind-Value="@tdesde" class="form-control shadow mb-2" />
        <label class="fw-bold">Fecha hasta: </label>
        <InputDate Type="InputDateType.DateTimeLocal"
                   min="@DateTime.Today.ToString("dd-MM-yyyy")" @bind-Value="@thasta" class="form-control shadow mb-2" />
    </div>
    <div class="col-4">
        <strong><span>Tiempo de Consulta :@TimeQuery.TotalSeconds</span></strong>
    </div>
    <div class="row mb-2">
        <div class="col d-flex justify-content-start">
            <button class="btn btn-primary shadow me-2" @onclick="LoadData">Cargar Datos</button>
            <button class="btn btn-primary shadow me-2" @onclick="ExportCsv">Exportar Csv</button>
            <button class="btn btn-primary shadow me-2" @onclick="ExportExcel" >Exportar Excel</button>
            <button class="btn btn-primary shadow me-2" @onclick="ExportPdf">Exportar Pdf</button>
            <button class="btn btn-primary shadow me-2" @onclick="SendEmail">Enviar Email</button>
        </div>
    </div>
</div>


@if (isLoading)
{
    <LoadingIndicator />
}
else
{
    <table class="table table-bordered table-striped shadow" id="tablePonches">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre Empleado</th>
                <th>Departamento</th>
                <th>Cargo</th>
                <th>Fecha</th>
                <th>Dia</th>
                <th>Marca1</th>
                <th>Marca2</th>
                <th>Marca3</th>
                <th>Marca4</th>
            </tr>
        </thead>
        <tbody>
            @if (ponches.Count >= 0)
            {
                @foreach (var item in ponches)
                {
                    <tr>
                        <td>@item.Id</td>
                        <td>@item.Empleado</td>
                        <td>@item.Departamento</td>
                        <td>@item.Cargo</td>
                        <td>@item.RecordTime.ToShortDateString()</td>
                        <td>@item.StringNameDate</td>
                        <td>@item.Marca1</td>
                        <td>@item.Marca2</td>
                        <td>@item.Marca3</td>
                        <td>@item.Marca4</td>
                    </tr>    
                }
            }

        </tbody>
    </table>

}

@code {
    public DateTime tdesde { get; set; } = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1);

    public DateTime thasta { get; set; } = new DateTime(DateTime.Today.Year, DateTime.Today.Month,1).AddMonths(1).AddDays(-1);

    public List<PoncheRegistro> ponches { get; set; } = new(); 

    public bool isLoading;
    public bool DtPaint = false;
    public TimeSpan TimeQuery { get; set; }

    private async Task LoadData()
    {
        //cambio a formto sql-server
        string date1 = tdesde.ToString("MM/dd/yyyy");
        string date2 = thasta.ToString("MM/dd/yyyy");
        isLoading = true;
        var watch = Stopwatch.StartNew();
        //hay que pasarle la fecha con formato MM/dd/yyyy para que pueda funcionar.
        var url = $"http://localhost:5002/Api/Attendance?startDate={date1}&endDate={date2}";
        using (var httpClient = new HttpClient())
        {
            var respuesta = await httpClient.GetAsync(url);
            var rptString = await respuesta.Content.ReadAsStringAsync();
            ponches = JsonSerializer.Deserialize<List<PoncheRegistro>>(rptString, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true })!;
        }
        if (!DtPaint)
        {
            await JS.InvokeAsync<object>("DataTableInitPonches", "#tablePonches", ponches);
            DtPaint = true;
        }
        else
        {
            await JS.InvokeAsync<object>("DataTableRepaint", "#tablePonches");

        }
        watch.Stop();
        TimeQuery = watch.Elapsed;
        isLoading = false;
    }

    public async ValueTask DisposeAsync()
    {
        await JS.InvokeAsync<object>("DataTableUnload", "#tablePonches");
    }
    async Task ExportCsv()
    {
        var memoryStream = new MemoryStream();
        await using (var writer = new StreamWriter(memoryStream))
        await using (var csv = new CsvWriter(writer, CultureInfo.InvariantCulture))
        {
            await csv.WriteRecordsAsync(ponches);
        }
        var arr = memoryStream.ToArray();
        await JS.InvokeAsync<object>("saveAsFile", "RegistrosMarcas.csv", Convert.ToBase64String(arr));
    }

    async Task ExportExcel()
    {
        using (var workbook = new XLWorkbook())
        {
            var propertyNames = typeof(PoncheRegistro).GetProperties().Select(p => p.Name).ToList();

            var sheet = workbook.Worksheets.Add("registro_asistencia");

            //escribo los encabezados.
            for (int i = 0; i < propertyNames.Count; i++)
            {
                sheet.Cell(1, i + 1).Value = propertyNames[i];
                sheet.Cell(1, i + 1).Style.Font.SetBold();

            }
            sheet.Column(1).Width = 5;
            sheet.Column(2).Width = 35;
            sheet.Column(3).Width = 35;
            sheet.Column(4).Width = 20;
            sheet.Column(5).Width = 20;
            sheet.Column(6).Width = 20;
            sheet.Column(7).Width = 20;
            sheet.Column(8).Width = 20;
            // escribo las filas.
            var rowData = ponches.ToList();
            for (int rowIndex = 0; rowIndex < rowData.Count; rowIndex++)
            {
                for (int colIndex = 0; colIndex < propertyNames.Count; colIndex++)
                {
                    var propertyName = propertyNames[colIndex];
                    var propertyValue = typeof(PoncheRegistro).GetProperty(propertyName)?.GetValue(rowData[rowIndex])?.ToString();
                    sheet.Cell(rowIndex + 2, colIndex + 1).Value = propertyValue;
                }
            }
            using (var stream = new MemoryStream())
            {
                workbook.SaveAs(stream);
                await JS.InvokeAsync<object>("saveExcel", "asistencia.xlsx", stream.ToArray());
            }
        }
    }
    async Task ExportPdf()
    {
        await Swal.FireAsync("mensaje", "Crear archivo PDF.", SweetAlertIcon.Success);
    }
    async Task SendEmail()
    {
        await Swal.FireAsync("mensaje", "Enviar Email", SweetAlertIcon.Success);
    }

   
}

